-- Домашнее задание 4, пример 2. Посмотрим, какие ограничения уже наложены на атрибуты таблицы «Успеваемость» (progress). 
edu=# \d progress 

                             Таблица "public.progress"
   Столбец   |     Тип      | Правило сортировки | Допустимость NULL | По умолчанию 
-------------+--------------+--------------------+-------------------+--------------
 record_book | numeric(5,0) |                    | not null          | 
 subject     | text         |                    | not null          | 
 acad_year   | text         |                    | not null          | 
 term        | numeric(1,0) |                    | not null          | 
 mark        | numeric(1,0) |                    | not null          | 5
Ограничения-проверки:
    "progress_mark_check" CHECK (mark >= 2::numeric AND mark <= 5::numeric)
    "progress_term_check" CHECK (term = 1::numeric OR term = 2::numeric)
Ограничения внешнего ключа:
    "progress_record_book_fkey" FOREIGN KEY (record_book) REFERENCES students(record_book) ON UPDATE CASCADE ON DELETE CASCADE
-- Добавим в таблицу progress колонку test_form
ALTER TABLE progress
 ADD COLUMN test_form text; 

-- А также дополнительное условие  
ALTER TABLE progress                         
  ADD CHECK ((test_form = 'экзамен' AND mark IN (3,4,5))
              OR 
             (test_form = 'зачет' AND mark IN (0, 1))
);
-- Добавим данные
INSERT INTO students 
     VALUES (24014, 'Rysistov A.V', 4524, 153335);
SELECT * FROM students;
-
-- Запись с экзаменом добавляется корректно 
INSERT INTO progress 
     VALUES (24014, 'Математический анализ', '2022-2023', 1, 5, 'экзамен'); 
SELECT * FROM progress;

/* Запись с зачетом добавляется с ошибкой, так как срабатывает проверка progress_mark_check, которое мы создавали при инициализации таблицы*/ 

INSERT INTO progress 
     VALUES (24014, 'Психология', '2021-2022', 1, 1, 'зачет'); 
/* ERROR:  new row for relation "progress" violates check constraint "progress_mark_check"*/

-- Удалим проверку progress_mark_check, так как ее полностью покрывает проверка test_form

ALTER TABLE     progress 
DROP CONSTRAINT progress_mark_check;

-- Произведем добавление данных повторно, чтобы удостовериться в том, что запрос отработает корректно

INSERT INTO progress 
     VALUES (24014, 'Психология', '2021-2022', 1, 1, 'зачет'); 
SELECT * FROM progress;
-- Добавляем заявленную проверку
ALTER TABLE progress 
  ADD CHECK (acad_year ~ $$^20[0-9]{2}\-20[0-9]{2}$$); 

-- Протестируем установленное ограничение, добавив в таблицу корректные и некорректные примеры:
-- Корректный пример значения столбца acad_year:
INSERT INTO progress 
     VALUES (24014, 'Проектирование баз данных', '2021-2022', 1, 5, 'экзамен'); 
SELECT * FROM progress;

-- Некорректный пример значения столбца acad_year:
INSERT INTO progress 
    VALUES (24014, 'Управление IT-проектами', '2021--2022', 1, 1, 'зачет');
SELECT * FROM progress;
/*ERROR:  new row for relation "progress" violates check constraint "progress_acad_year_check"*/


-- Домашнее задание 4, пример 9. В таблице «Студенты» (students) есть текстовый атрибут name, на который наложено ограничение NOT NULL. Проверим, что будет, если при вводе новой строки в эту таблицу дать атрибуту name в качестве значения пустую строку.
/* При добавлении пустых строчек в колонках типа text NOT NULL никаких ошибок не возникает 

Следующий запрос выполнится без ошибок и строка будет добавлена в таблицу:*/

INSERT INTO students 
     VALUES (83515, ' ', 5353, 98373); 
-- Удалим все записи из таблицы students, в которых имя является пустой строкой
DELETE * 
  FROM students 
 WHERE TRIM(name) = ''; 
-- Добавим новую проверку в таблицу
ALTER TABLE students 
  ADD CHECK (TRIM(name) <> '');

-- Попробуем произвести вставку. Теперь запрос выполнится с ошибкой.
INSERT INTO students 
     VALUES (83515, ' ', 5353, 98373);  
ALTER TABLE progress 
  ADD CHECK (TRIM(subject) <> '');
  ADD CHECK (TRIM(acad_year) <> '');


-- Домашнее задание 4, пример 17. Создадим представление с вылетами из Москвы. Представление будет содержать следующие столбцы: номер рейса (flight_no);, город отправления (departure_city).ю аэропорт отправления (departure_airport);
город отправления (arrival_city), аэропорт прибытия (arrival_airport); время вылета по расписанию (scheduled_departure), время посадки по расписанию (scheduled_arrival), статус рейса (status), код самолета (aircraft_code), реальное время отправления (actual_departure), реальное время посадки (actual_arrival)
CREATE OR REPLACE VIEW flights_from_Moscow AS 
    SELECT 
        temp.flight_no, 
        temp.departure_city,
        temp.departure_airport,
        aa.city as arrival_city,
        aa.airport_name as arrival_airport,        
        temp.scheduled_departure, 
        temp.scheduled_arrival, 
        temp.status, 
        temp.aircraft_code, 
        temp.actual_departure, 
        temp.actual_arrival 
      FROM (
        SELECT 
            f.flight_no, 
            a.airport_name as departure_airport, 
            f.arrival_airport, 
            a.city as departure_city,
            f.scheduled_departure, 
            f.scheduled_arrival, 
            f.status, 
            f.aircraft_code, 
            f.actual_departure, 
            f.actual_arrival 
          FROM 
            bookings.flights as f
                LEFT JOIN bookings.airports as a
                       ON f.departure_airport = a.airport_code
         WHERE a.city = 'Москва' 
    ) as temp
        LEFT JOIN bookings.airports as aa
            ON temp.arrival_airport = aa.airport_code;
-- Выберем первые 10 строк представления. Для экономии размера выводимой таблицы ограничим количество столбцов

SELECT flight_no,  departure_city, departure_airport, arrival_city, arrival_airport
FROM flights_from_Moscow
LIMIT 10;
 flight_no | departure_city | departure_airport |  arrival_city   | arrival_airport 
-----------+----------------+-------------------+-----------------+-----------------
 PG0405    | Москва         | Домодедово        | Санкт-Петербург | Пулково
 PG0404    | Москва         | Домодедово        | Санкт-Петербург | Пулково
 PG0405    | Москва         | Домодедово        | Санкт-Петербург | Пулково
 PG0402    | Москва         | Домодедово        | Санкт-Петербург | Пулково
 PG0405    | Москва         | Домодедово        | Санкт-Петербург | Пулково
 PG0404    | Москва         | Домодедово        | Санкт-Петербург | Пулково
 PG0403    | Москва         | Домодедово        | Санкт-Петербург | Пулково
 PG0402    | Москва         | Домодедово        | Санкт-Петербург | Пулково
 PG0405    | Москва         | Домодедово        | Санкт-Петербург | Пулково
 PG0402    | Москва         | Домодедово        | Санкт-Петербург | Пулково
SELECT count(*)
  FROM flights_from_Moscow
 WHERE departure_city = 'Москва' AND arrival_city = 'Санкт-Петербург'

-- 732
SELECT   count(*), departure_airport 
  FROM   flights_from_Moscow 
GROUP BY departure_airport;
 count | depature_airport 
-------+------------------
  1719 | Внуково
  2981 | Шереметьево
  3217 | Домодедово


-- Домашнее задание 4, пример 18. Подумаем, какие еще таблицы было бы целесообразно дополнить столбцами типа json/jsonb. Вспомните, что, например, в таблице «Билеты» (tickets) уже есть столбец такого типа — contact_data. Выполните модификации таблиц и измените в них одну-две строки для проверки правильности ваших решений.
-- Добавляем столбец booking_period в таблицу bookings
ALTER TABLE bookings.bookings 
 ADD COLUMN booking_period jsonb;

-- Обновим одну из строк таблицы:
UPDATE bookings.bookings
   SET booking_period = '{"booking_start": "06.10.2020", 
                          "booking_end": "16.10.2020"}'
 WHERE book_ref='000181';


SELECT * 
  FROM bookings.bookings 
 WHERE book_ref='000181';
 book_ref |       book_date        | total_amount |   booking_period
----------+------------------------+--------------+-------------------------------------------------------------
 000181   | 2016-10-08 12:28:00+03 |    131800.00 | {"booking_end": "16.10.2020", "booking_start": "06.10.2020"}


-- Домашнее задание 5, пример 2. Этот запрос выбирает из таблицы «Билеты» (tickets) всех пассажиров с именами, состоящими из трех букв (в шаблоне присутствуют три символа «_»):
   SELECT passenger_name
  FROM tickets
 WHERE passenger_name LIKE '___ %';
SELECT passenger_name
  FROM tickets
 WHERE passenger_name LIKE '% _____';
passenger_name  
------------------
 ILYA POPOV
 VLADIMIR POPOV
 PAVEL GUSEV
 LEONID ORLOV
 EVGENIY GUSEV
 NIKOLAY FOMIN
 EKATERINA ILINA
 ANTON POPOV
 ARTEM BELOV
 VLADIMIR POPOV
 ALEKSEY ISAEV
 ...
  SELECT count(passenger_name)
  FROM tickets
 WHERE passenger_name LIKE '% _____';
 count 
-------
 14272
(1 row)

   -- Домашнее задание 5, пример 7. Самые крупные самолеты в нашей авиакомпании — это Boeing 777-300. Выяснить, между какими парами городов они летают, поможет запрос:
   SELECT DISTINCT departure_city, arrival_city
FROM routes r
     JOIN aircrafts a 
       ON r.aircraft_code = a.aircraft_code
WHERE a.model = 'Boeing 777-300'
ORDER BY 1;
SELECT DISTINCT r.departure_city, r.arrival_city
FROM routes r
     JOIN routes rr 
       ON r.arrival_city = rr.departure_city
      AND rr.arrival_city = r.departure_city 
      AND r.arrival_city > rr.arrival_city
     JOIN aircrafts a ON r.aircraft_code = a.aircraft_code
WHERE a.model = 'Boeing 777-300'
ORDER BY 1;
 departure_city | arrival_city
----------------+--------------
 Екатеринбург   | Москва
 Москва         | Новосибирск
 Москва         | Пермь
 Москва         | Сочи
(4 rows)

   -- Домашнее задание 5, ворпос 9. Для ответа на вопрос, сколько рейсов выполняется из Москвы в Санкт-Петербург, можно написать простой запрос:
SELECT count(*)
FROM routes
WHERE departure_city = 'Москва'
AND arrival_city = 'Санкт-Петербург'
   SELECT departure_city, arrival_city, count(*)
  FROM routes
 WHERE departure_city = 'Москва'
   AND arrival_city = 'Санкт-Петербург'
GROUP BY departure_city, arrival_city;
    departure_city |  arrival_city   | count
----------------+-----------------+-------
 Москва         | Санкт-Петербург |    12
(1 rows)

   -- Домашнее задание 5, пример 13. Ответить на вопрос о том, каковы максимальные и минимальные цены билетов на все направления, может такой запрос:
      SELECT
       f.departure_city,
       f.arrival_city,
       max(tf.amount),
       min(tf.amount)
  FROM flights_v f
       JOIN ticket_flights tf 
         ON f.flight_id = tf.flight_id
GROUP BY 1, 2
ORDER BY 1, 2;
SELECT
       f.departure_city,
       f.arrival_city,
       max(tf.amount),
       min(tf.amount)
FROM flights_v f
     LEFT JOIN ticket_flights tf 
            ON f.flight_id = tf.flight_id
GROUP BY 1, 2
ORDER BY 1, 2;


-- Домашнее задание 5, пример 19. 
  WITH RECURSIVE ranges (min_sum, max_sum, level)
  AS (
    VALUES (0, 100000, 1),
           (100000, 200000, 1),
           (200000, 300000, 1)
    UNION ALL
    SELECT min_sum + 100000, max_sum + 100000, level + 1
    FROM ranges
    WHERE max_sum < ( 
      SELECT max( total_amount ) 
      FROM bookings 
      )
)
SELECT * FROM ranges;
WITH RECURSIVE ranges (min_sum, max_sum)
  AS (
    VALUES (0, 100000),
           (100000, 200000),
           (200000, 300000)
    UNION
    SELECT min_sum + 100000, max_sum + 100000
    FROM ranges
    WHERE max_sum < ( 
      SELECT max( total_amount ) 
      FROM bookings 
    )
)
SELECT * FROM ranges;

-- Домашнее задание 5. пример 21. В тексте главы был приведен запрос, выводящий список городов, в которые нет рейсов из Москвы.
  SELECT DISTINCT a.city
  FROM airports a
 WHERE NOT EXISTS (
          SELECT * FROM routes r
          WHERE r.departure_city = 'Москва'
          AND r.arrival_city = a.city
  )
      AND a.city <> 'Москва'
ORDER BY city;
(SELECT city
  FROM airports
 WHERE city <> 'Москва')
EXCEPT
(SELECT arrival_city
  FROM routes
 WHERE departure_city = 'Москва')
ORDER BY city;

-- Домашнее задание 5, пример 23. 
  WITH city_from AS ( 
    SELECT DISTINCT city 
    FROM airports 
)
SELECT count(*)
FROM city_from AS a1
    JOIN city_from AS a2
ON a1.city <> a2.city;


-- Домашнее задание 6, пример 1. 
  -- DROP TABLE aircrafts_log;
-- TRUNCATE TABLE aircrafts_tmp;
CREATE TEMP TABLE aircrafts_log AS
SELECT * FROM aircrafts WITH NO DATA;
ALTER TABLE aircrafts_log
ADD COLUMN log_timestamp TIMESTAMP DEFAULT (current_timestamp);
WITH add_row AS( 
    INSERT INTO aircrafts_tmp
    SELECT * FROM aircrafts
    RETURNING *
)
INSERT INTO aircrafts_log
     SELECT 
           add_row.aircraft_code, 
           add_row.model, 
           add_row.range
      FROM add_row;

SELECT * FROM aircrafts_log

-- Домашнее задание 6, пример 2.
  WITH add_row AS( 
    INSERT INTO aircrafts_tmp
         SELECT * 
           FROM aircrafts
    RETURNING 
        aircraft_code, model, 
        range, current_timestamp, 
        'INSERT'
)
INSERT INTO aircrafts_log
     SELECT * 
       FROM add_row;

-- Домашнее задание 6, пример 4.
  CREATE TEMP TABLE seats_tmp AS 
SELECT * FROM SEATS;

ALTER TABLE seats_tmp
ADD PRIMARY KEY (aircraft_code, seat_no);
demo=# \d seats_tmp
                                  Таблица "pg_temp_3.seats_tmp"
     Столбец     |          Тип          | Правило сортировки | Допустимость NULL | По умолчанию
-----------------+-----------------------+--------------------+-------------------+
 aircraft_code   | character(3)          |                    | not null          |
 seat_no         | character varying(4)  |                    | not null          |
 fare_conditions | character varying(10) |                    |                   |
Индексы:
    "seats_tmp_pkey" PRIMARY KEY, btree (aircraft_code, seat_no)
  INSERT INTO seats_tmp
     SELECT aircraft_code, 
            seat_no, 
            fare_conditions
       FROM seats 
         ON CONFLICT 
         DO NOTHING;

-- Домашнее задание 7, пример 1. Описанная в задании операция завершится ошибкой, по причине того, что нулевые значения (NULL) не будут распознаны как соответствующие каким либо существующим значениям.
-- Домашнее задание 7, пример 3. 
  SELECT count( * )
FROM ticket_flights
WHERE fare_conditions = 'Comfort';
SELECT count( * )
FROM ticket_flights
WHERE fare_conditions = 'Business';
SELECT count( * )
FROM ticket_flights
WHERE fare_conditions = 'Economy';
CREATE INDEX
ON ticket_flights ( fare_conditions );
SELECT count( * )
FROM ticket_flights
WHERE fare_conditions = 'Comfort';
SELECT count( * )
FROM ticket_flights
WHERE fare_conditions = 'Business';
SELECT count( * )
FROM ticket_flights
WHERE fare_conditions = 'Economy';
